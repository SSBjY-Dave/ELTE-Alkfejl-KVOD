@startuml

skinparam classAttributeIconSize 0

enum RoomState {
	AVAIABLE, NOT_AVAILABLE
}

enum RoomType {
	MALE, FEMALE, MIXED
}

class AdminModeService {
	{static} - instance : AdminModeService
	{static} + getInstance() : AdminModeService
	+ addPerson(Person) : Person
	+ addPerson(Person[]) : Person[]
	+ deletePerson(Person) : boolean
	+ updatePerson(Person) : boolean
	+ modifyReservation(Person, Layout) : boolean
	+ modifyReservation(Person[], Layout[]) : boolean
	+ modifyRoom(RoomState, RoomType) : boolean
	+ setRoomCapacity(Room) : boolean
}

AdminModeService --> UserModeService : Uses
AdminModeService ..> RoomState
AdminModeService ..> RoomType


class UserModeService {
	{static} - instance : UserModeService
	{static} + getInstance() : UserModeService
	+ authenticateUser(Person) : Person
	+ getUserWithEmail(String) : Person
	+ getRooms() : Room[]
	+ reserveRoom(Person, Room) : boolean
	+ cancelReservation(Person, Room) : boolean
	+ modifyRoomType(RoomType) : boolean
	+ changeReservation(Person, Room) : boolean
}

UserModeService ..> RoomType

class AdminController {
	+ addPerson(Person) : Person
	+ addPerson(Person[]) : Person[]
	+ deletePerson(Person) : boolean
	+ updatePerson(Person) : boolean
	+ modifyReservation(Person, Layout) : boolean
	+ modifyReservation(Person[], Layout[]) : boolean
	+ modifyRoom(RoomState, RoomType) : boolean
	+ setRoomCapacity(Room) : boolean
}

AdminController --> AdminModeService : Uses

class MainController {
	+ authenticateUser(Person) : Person
	+ getUserWithEmail(String) : Person
	+ getRooms() : Room[]
	+ reserveRoom(Person, Room) : boolean
	+ cancelReservation(Person, Room) : boolean
	+ modifyRoomType(RoomType) : boolean
	+ changeReservation(Person, Room) : boolean
}

MainController --> UserModeService : Uses

@enduml